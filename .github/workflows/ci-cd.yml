name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run Linting
      run: npm run lint
      
    - name: Run Tests
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        USE_SUPABASE: 'true'
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_POSTGRES_URL_DEV: ${{ secrets.SUPABASE_POSTGRES_URL }}
        SUPABASE_POSTGRES_URL_PROD: ${{ secrets.SUPABASE_POSTGRES_URL }}
    
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
      env:
        VITE_APP_ENV: production
        USE_SUPABASE: 'true'
        DATABASE_URL: ${{ secrets.SUPABASE_POSTGRES_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_POSTGRES_URL_DEV: ${{ secrets.SUPABASE_POSTGRES_URL }}
        SUPABASE_POSTGRES_URL_PROD: ${{ secrets.SUPABASE_POSTGRES_URL }}
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
    
    - name: Deploy to DigitalOcean
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        source: "dist/"
        target: "/var/www/lefv_io"
        strip_components: 1

    - name: Restart Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DIGITALOCEAN_HOST }}
        username: ${{ secrets.DIGITALOCEAN_USERNAME }}
        key: ${{ secrets.DIGITALOCEAN_SSH_KEY }}
        script: |
          cd /var/www/lefv_io
          echo "USE_SUPABASE=true" > .env
          echo "DATABASE_URL=${{ secrets.SUPABASE_POSTGRES_URL }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_POSTGRES_URL_DEV=${{ secrets.SUPABASE_POSTGRES_URL }}" >> .env
          echo "SUPABASE_POSTGRES_URL_PROD=${{ secrets.SUPABASE_POSTGRES_URL }}" >> .env
          npm install --production
          pm2 restart lefv_io || pm2 start npm --name "lefv_io" -- start